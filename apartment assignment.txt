You're looking to move into a new apartment on specific street, and you're given a list of contiguous blocks on that street where
each block contains an apartment that you could move into.

You also have a list of requirements: a list of buildings that are important to you. For instance, you might value having a school and
a gym near your apartment. The list of blocks that you have contains information at every block about all of the buildings that are
present and absent at the block in question. For instance, for every block, you might know whether a school, a pool, an office, and a
gym are present.

In order to optimize your life, you want to pick an apartment block such that you minimize the farthest distance you'd have to walk
from your apartment to reach any of your required buildings.

Write a function that takes in a list of contiguous blocks on a specific street and a list of your required buildings and that returns
the location (the index) of the block that's most optimal for you.

If there are multiple most optimal blocks, your function can return the index of any one of them.

Sample Input
blocks = [
{
    "gym": false,
    "school": true,
    "store": false,
},
{
    "gym": true,
    "school": false,
    "store": false,
},
{
    "gym": true,
    "school": true,
    "store": false,
},
{
    "gym": false,
    "school": true,
    "store": false,
},
{
"gym": false,
"school": true,
"store": true,
}
]
reqs = ["gym", "school", "store"]

Sample Output
3 // at index 3, the farthest you'd have to walk to reach a gym,
 a school, or a store is 1 block; at any other index,
 you'd have to walk farther
 
 
 solution:-
 
 
 
 main(arrObj, list)
let minSteps = []
for(let i = 0; i < arrObj.length; i++){
    minSteps[i] = getMinSteps(i,arrObj,list)
}
return minSteps.indexOf(Math.min(...minSteps))
}

function getMinSteps(idx, arrObj,list){
  let currItems = arrObj[idx]
  let minSteps = 0
  let left = idx
  let right = idx
  while(left >= 0 || right < arrObj.length){
    let leftObj = left >= 0 ? arrObj[left] : {}
    let rightObj = right < arrObj.length ? arrObj[right] : {}
    let combineItems = getCombineItems(leftObj,rightObj,currItems,list)
    if(containsAllItems(combineItems,list)) return minSteps
    minSteps++
    left--
    right++
  }
  return minSteps
}

function getCombineItems(leftObj,rightObj,currItems,list){
  for(let eachItem of list){
    currItems[eachItem] = leftObj[eachItem] || rightObj[eachItem] || currItems[eachItem] ? true : false
  }
  return currItems
}

function containsAllItems(obj,list){
  for(let i = 0; i < list.length; i++){
    let currItem = list[i]
    if(obj[currItem] === false) return false
  }
  return true
}



function apartmentHunting(blocks,reqs){
  let minSteps = []
  for(let i = 0; i < blocks.length; i++){
    minSteps[i] = getMinSteps(i,blocks,reqs)
  }
  return minSteps.indexOf(Math.min(...minSteps))
}

function getMinSteps(idx,blocks,reqs){
  let minSteps = 0
  let currItemObj = {}
  for(let key in blocks[idx]){
    currItemObj[key] = blocks[idx][key]
  }
  
  let left = idx
  let right = idx
  while(left >= 0 || right < blocks.length){
    let leftObj = left >= 0 ? blocks[left] : {}
    let rightObj = right < blocks.length ? blocks[right] : {}
    let currItemObj = getCombinedObj(leftObj,rightObj, currItemObj,reqs)
    if(containsAllReq(currItemObj,reqs)) return minSteps
    minSteps++
    left--
    right++
  }
  return minSteps
}

function getCombinedObj(leftObj,rightObj,currItemObj,reqs){
  for(let eachReq of reqs){
    currItemObj[eachReq] = leftObj[eachReq] || rightObj[eachReq] || currItemObj[eachReq] ? true : false
  }
  return currItemObj
}

function containsAllReq(currItemObj,reqs){
  for(let i = 0; i < reqs.length; i++){
    let ER = reqs[i]
    if(currItemObj[ER] === false) return false
  }
  return true
}


Time complexcity: o(n^2*m)
space complexcity: o(n)


Approach : Initialize a vector that stores the farthest distance of a particular service for every block.
 for every block, go through every requirement and find the closest block that satisfies that requirements and change vector value for that block with 
 a minimum of the current value and maximum distance for any requirement .
  At the end return the index the minimum value in the vector.

 
 
 